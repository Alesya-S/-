-- Написать функцию, которая удаляет всю информацию об указанном пользователе из БД vk. Пользователь задается по id. 
-- Удалить нужно все сообщения, лайки, медиа записи, профиль и запись из таблицы users. Функция должна возвращать номер пользователя.

USE vk;

DROP FUNCTION IF EXISTS delete_user;

-- DELIMITER // у меня не отрабатывает корректно 

CREATE FUNCTION delete_user (delete_user_id BIGINT UNSIGNED)
RETURNS BIGINT DETERMINISTIC
BEGIN
	
	DELETE FROM messages ms
	WHERE ms.from_user_id = delete_user_id OR ms.to_user_id = delete_user_id;

	DELETE FROM friend_requests fr
	WHERE fr.target_user_id = delete_user_id OR fr.initiator_user_id = delete_user_id;

	DELETE FROM users_communities uc
	WHERE uc.user_id = delete_user_id;

	DELETE FROM profiles p
	WHERE p.user_id = delete_user_id;

	DELETE likes 
	FROM media
	JOIN likes ON media.id = likes.media_id 
	WHERE media.user_id = delete_user_id OR likes.user_id = delete_user_id;

	UPDATE profiles p
	JOIN media m ON p.photo_id = m.id 
	SET p.photo_id = NULL
	WHERE m.user_id = delete_user_id;

	DELETE FROM media m
	WHERE m.user_id = delete_user_id;

	DELETE FROM users u
	WHERE u.id = delete_user_id;

RETURN delete_user_id;
END;

-- DELIMITER ; у меня не отрабатывает корректно

SELECT delete_user(1);

-- Предыдущую задачу решить с помощью процедуры и обернуть используемые команды в транзакцию внутри процедуры. 
-- (*)Сделать обработку исключения - см пример в файле Конспект вебинара - создание процедуры

DROP PROCEDURE IF EXISTS del_user;

CREATE PROCEDURE del_user(del_user_id BIGINT UNSIGNED)

BEGIN

	START TRANSACTION;

	DELETE FROM messages ms
	WHERE ms.from_user_id = del_user_id OR ms.to_user_id = del_user_id;

	DELETE FROM friend_requests fr
	WHERE fr.target_user_id = del_user_id OR fr.initiator_user_id = del_user_id;

	DELETE FROM users_communities uc
	WHERE uc.user_id = del_user_id;

	DELETE FROM profiles p
	WHERE p.user_id = del_user_id;

	DELETE likes 
	FROM media
	JOIN likes ON media.id = likes.media_id 
	WHERE media.user_id = del_user_id OR likes.user_id = del_user_id;

	UPDATE profiles p
	JOIN media m ON p.photo_id = m.id 
	SET p.photo_id = NULL
	WHERE m.user_id = del_user_id;

	DELETE FROM media m
	WHERE m.user_id = del_user_id;

	DELETE FROM users u
	WHERE u.id = del_user_id;

	-- ROLLBACK;
	COMMIT;

END;

CALL del_user(3);

-- * Написать триггер, который проверяет новое появляющееся сообщество. Длина названия сообщества (поле name) должна быть не менее 5 символов.
-- Если требование не выполнено, то выбрасывать исключение с пояснением. (см пример в файле Конспект вебинара - пункт 6)

DROP TRIGGER IF EXISTS check_new_community;

CREATE TRIGGER check_new_community BEFORE INSERT ON communities 
FOR EACH ROW
begin
    IF LENGTH(NEW.name) < 5 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Update Canceled. Community name must contain at least five characters!';
    END IF;
end;


   
